//! The core recording logic of Sotto.
//!
//! This code is largely taken from https://github.com/RustAudio/cpal/blob/master/examples/record_wav.rs.

use cpal::traits::{DeviceTrait, HostTrait, StreamTrait};
use cpal::Sample;
use rubato::{Resampler, SincFixedIn, ResampleError, WindowFunction, SincInterpolationType, SincInterpolationParameters};
use std::fs::File;
use std::io::BufWriter;
use std::sync::{Arc, Mutex};
use hound::{WavWriter, WavSpec};
use tokio::sync::oneshot::Receiver;

/// Begin a new recording. This will not actually terminate until the given receiver instructs it to.
///
/// This is a blocking function!
pub fn start_recording(path: &str, rx: Receiver<()>) -> Result<(), String> {
    let host = cpal::default_host();
    let device = host.default_input_device().ok_or(String::from("failed to find input device (do you have a microphone plugged in?)"))?;

    let config = device
        .default_input_config()
        .map_err(|_| String::from("failed to get default input configuration"))?;

    let spec = WavSpec {
        channels: config.channels() as _,
        sample_rate: config.sample_rate().0 as _,
        bits_per_sample: (config.sample_format().sample_size() * 8) as _,
        sample_format: if config.sample_format().is_float() {
            hound::SampleFormat::Float
        } else {
            hound::SampleFormat::Int
        },
    };
    let writer = WavWriter::create(path, spec).map_err(|_| String::from("failed to create audio writer"))?;
    let writer = Arc::new(Mutex::new(Some(writer)));

    // Run the input stream on a separate thread
    let writer_2 = writer.clone();

    // Create a resampler to convert the audio data to 16kHz (required by Whisper) in real-time
    let params = SincInterpolationParameters {
        sinc_len: 256,
        f_cutoff: 0.95,
        interpolation: SincInterpolationType::Linear,
        oversampling_factor: 256,
        window: WindowFunction::BlackmanHarris2,
    };
    let mut resampler = SincFixedIn::<f32>::new(
        16000 as f64 / config.sample_rate().0 as f64,
        2.0,
        params,
        1024,
        1,
    ).expect("TODO");

    // TODO
    let err_fn = move |err| {
        eprintln!("an error occurred on stream: {}", err);
    };

    // Dropping this will terminate the recording
    // For all non-f32 formats, we transcode them into f32 by scaling to [-1.0, 1.0]
    let stream = match config.sample_format() {
        cpal::SampleFormat::I8 => device.build_input_stream(
            &config.into(),
            move |data: &[i8], _: &_| {
                let data = data.iter().map(|d| *d as f32 / i8::MAX as f32).collect::<Vec<f32>>();
                write_input_data(&data, &mut resampler, &writer_2).expect("TODO")
            },
            err_fn,
            None,
        ).map_err(|_| String::from("failed to build input stream"))?,
        cpal::SampleFormat::I16 => device.build_input_stream(
            &config.into(),
            move |data: &[i16], _: &_| {
                let data = data.iter().map(|d| *d as f32 / i16::MAX as f32).collect::<Vec<f32>>();
                write_input_data(&data, &mut resampler, &writer_2).expect("TODO")
            },
            err_fn,
            None,
        ).map_err(|_| String::from("failed to build input stream"))?,
        cpal::SampleFormat::I32 => device.build_input_stream(
            &config.into(),
            move |data: &[i32], _: &_| {
                let data = data.iter().map(|d| *d as f32 / i32::MAX as f32).collect::<Vec<f32>>();
                write_input_data(&data, &mut resampler, &writer_2).expect("TODO")
            },
            err_fn,
            None,
        ).map_err(|_| String::from("failed to build input stream"))?,
        cpal::SampleFormat::F32 => device.build_input_stream(
            &config.into(),
            move |data: &[f32], _: &_| write_input_data(data, &mut resampler, &writer_2).expect("TODO"),
            err_fn,
            None,
        ).map_err(|_| String::from("failed to build input stream"))?,
        sample_format => {
            return Err(format!(
                "unsupported sample format '{sample_format}'"
            ))
        }
    };

    stream.play().map_err(|_| String::from("failed to start audio stream"))?;

    // This function will now *synchronously* wait for the termination signal.
    // This would be an error if the sender were dropped, which could indicate
    // messy termination. We should terminate anyway.
    //
    // Waiting asynchronously is impossible because `stream` is not `Send`.
    let _ = rx.blocking_recv();

    drop(stream);
    writer.lock().unwrap().take().unwrap().finalize().expect("failed to terminate audio writer");

    Ok(())
}

type WavWriterHandle = Arc<Mutex<Option<WavWriter<BufWriter<File>>>>>;

fn write_input_data(input: &[f32], resampler: &mut SincFixedIn<f32>, writer: &WavWriterHandle) -> Result<(), ResampleError> {
    if let Ok(mut guard) = writer.try_lock() {
        if let Some(writer) = guard.as_mut() {
            // Process the data to 16kHz in realtime
            let resampled_data = &resampler.process(&vec![ &input ], None)?[0];
            for sample in resampled_data {
                let sample: f32 = f32::from_sample(*sample);
                writer.write_sample(sample).ok();
            }
        }
    }

    Ok(())
}
